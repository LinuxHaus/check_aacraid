#!/usr/bin/env python

from __future__ import with_statement

import daemon
import daemon.pidlockfile
import aacraid
import signal
import os
import sys
from time import sleep

import smtplib
from email.MIMEMultipart import MIMEMultipart
from email.MIMEText import MIMEText
from email.utils import formatdate

from ConfigParser import SafeConfigParser
from optparse import OptionParser
import logging

parser = OptionParser(version='0.1')
parser.add_option("-c", "--config", dest="conffile",
                  help="load configuration from CONFFILE")
parser.add_option("-d", "--debug",
                  action="store_true", dest="debug",
                  help="don't daemonize the process and log to stdout")
(options, args) = parser.parse_args()

if not options.conffile:
    if os.path.isfile('/etc/aacraidd/aacraidd.conf'):
        options.conffile = '/etc/aacraidd/aacraidd.conf'
    elif os.path.isfile('aacraidd.conf'):
        options.conffile = 'aacraidd.conf'
    else:
        print "Could not find a configuration file, exiting."
        sys.exit(1)

if not os.path.isfile(options.conffile):
    print "Could not find the configuration file at %s, exiting." % options.conffile
    sys.exit(1)

config = SafeConfigParser()
config.read(options.conffile)

smtp_enabled = config.getboolean('aacraidd', 'smtp_enabled')

smtp_server = smtp_port = smtp_user = smtp_pass = None

if smtp_enabled:
    smtp_server = config.get('aacraidd', 'smtp_server')
    smtp_port = config.getint('aacraidd', 'smtp_port')
    if config.has_option('aacraidd', 'smtp_user') and config.has_option('aacraidd', 'smtp_pass'):
        smtp_user = config.get('aacraidd', 'smtp_user')
        smtp_pass = config.get('aacraidd', 'smtp_pass')

mail_subject = config.get('aacraidd', 'mail_subject')
mail_from = config.get('aacraidd', 'mail_from')
mail_to = config.get('aacraidd', 'mail_to')

log_file = config.get('aacraidd', 'log_file')
pid_file = config.get('aacraidd', 'pid_file')

sleeptime = config.getint('aacraidd', 'sleeptime')

running = True
controllers = 0
last_status = {}

def aacraidd_start():
    global controllers
    logging.info("Starting aacraidd")
    controllers = aacraid.get_num_controllers()
    logging.info("Found %i controller(s)" % controllers)
    for c in range(1,controllers+1):
        i = aacraid.get_controller_info(c)
        logging.info("%(id)s | %(model)s | %(status)s" % i)
        last_status[i['id']] = i['last'] = i['status']
        if i['status'] != 'Optimal':
            notify_change(i)
            logging.warning("Controller %(id)s not in optimal state" % i)
    aacraidd()

def aacraidd_stop(sig, b):
    global running
    logging.info( "Terminating aacraidd on signal %s" % sig)
    running = False

def aacraidd():
    global last_status
    while running:
        sleep(sleeptime)
        for c in range(1,controllers+1):
            i = aacraid.get_controller_info(c)
            if last_status[i['id']] != i['status']:
                i['last'] = last_status[i['id']]
                try:
                    notify_change(i)
                    last_status[i['id']] = i['status']
                except:
                    pass

def notify_change(controller):
    mail_text = "Controller %(id)s changed state from %(last)s to %(status)s.\n\nCurrent controller information:\n" % controller
    mail_text += aacraid.pretty_info(controller['numid'])
    for line in mail_text.splitlines():
        logging.warn(line.strip())

    if not smtp_enabled:
        return

    s = smtplib.SMTP(smtp_server, smtp_port)
    if smtp_user and smtp_pass:
        s.login(smtp_user, smtp_pass)

    msg = MIMEMultipart()
    msg['Subject'] = mail_subject
    msg['From'] = mail_from
    msg['To'] = mail_to
    msg['Date'] = formatdate()
    text = MIMEText(mail_text, 'plain', 'utf-8')
    msg.attach(text)

    s.sendmail(mail_from, mail_to, msg.as_string())
    s.quit()

if options.debug:
    logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', datefmt='%Y-%m-%d %H:%M:%S', level=logging.DEBUG)
    context = daemon.DaemonContext(
        detach_process=False,
        stdout=sys.stdout,
        stderr=sys.stderr
        )
else:
    log = open(log_file, 'a')
    logging.basicConfig(stream=log, format='%(asctime)s:%(levelname)s:%(message)s', datefmt='%Y-%m-%d %H:%M:%S', level=logging.DEBUG)
    context = daemon.DaemonContext(
        detach_process=True,
        files_preserve = [log],
        stdout=log,
        stderr=log,
        )
    pid = daemon.pidlockfile.PIDLockFile(pid_file)
    context.pidfile = pid

context.signal_map = {
    signal.SIGTERM: aacraidd_stop,
    signal.SIGHUP: 'terminate',
    }

with context:
    aacraidd_start()
